package com.example.tcmhaa;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class PhotoActivity extends AppCompatActivity {
    private static final String TAG = "PhotoActivity";

    private ImageView imagePreview;
    private Button btnPickPhoto, btnBack;
    private Uri selectedImageUri;
    private ApiService apiService;

    // ÈÅ∏ÂèñÂúñÁâáÔºàÁõ∏Á∞øÔºâ
    private final ActivityResultLauncher<String> pickImageLauncher =
            registerForActivityResult(new ActivityResultContracts.GetContent(), uri -> {
                if (uri != null) {
                    selectedImageUri = uri;
                    showPreview(uri);
                } else {
                    Toast.makeText(this, "Êú™ÈÅ∏Êìá‰ªª‰ΩïÂúñÁâá", Toast.LENGTH_SHORT).show();
                }
            });

    private final ActivityResultLauncher<String> requestReadImagesPermission =
            registerForActivityResult(new ActivityResultContracts.RequestPermission(), granted -> {
                if (granted) {
                    pickImageLauncher.launch("image/*");
                } else {
                    Toast.makeText(this, "Êú™Áç≤ÂæóÂúñÁâáËÆÄÂèñÊ¨äÈôê", Toast.LENGTH_SHORT).show();
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_photo_5_1);

        initViews();
        initApiService();
    }

    private void initViews() {
        imagePreview = findViewById(R.id.imagePreview);
        btnPickPhoto = findViewById(R.id.btnPickPhoto);
        btnBack = findViewById(R.id.btnBack);

        btnPickPhoto.setOnClickListener(v -> {
            if (selectedImageUri == null) {
                pickImage();
            } else {
                // Â∑≤ÈÅ∏ÊìáÂúñÁâá ‚Üí Ë∑≥ÊèêÈÜíÂÜçÂàÜÊûê
                Intent i = new Intent(PhotoActivity.this, WarningActivity.class);
                i.putExtra("source_type", "photo");
                // ‰πüÂèØ‰ª•ÊääÂúñÁâá Uri ‰∏ÄËµ∑Â∏∂Âéª
                i.putExtra("selected_uri", selectedImageUri.toString());
                startActivity(i);
            }
        });
        btnBack.setOnClickListener(v -> finish());
    }

    private void initApiService() {
        apiService = new ApiService();
    }

    private void pickImage() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // Android 13+ ÈúÄË¶Å READ_MEDIA_IMAGES
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES)
                    == PackageManager.PERMISSION_GRANTED) {
                pickImageLauncher.launch("image/*");
            } else {
                requestReadImagesPermission.launch(Manifest.permission.READ_MEDIA_IMAGES);
            }
        } else {
            // Android 12-ÔºöGetContent ‰∏çÈúÄË¶ÅÈ°çÂ§ñÊ¨äÈôê
            pickImageLauncher.launch("image/*");
        }
    }

    private void showPreview(@NonNull Uri uri) {
        try {
            imagePreview.setImageURI(uri);
            // Êõ¥ÊîπÊåâÈàïÊñáÂ≠óÊèêÁ§∫Áî®Êà∂ÂèØ‰ª•ÈñãÂßãÂàÜÊûê
            btnPickPhoto.setText("ÈñãÂßãÂàÜÊûê");
            Toast.makeText(this, "ÂúñÁâáÂ∑≤ÈÅ∏ÊìáÔºåÈªûÊìä„ÄåÈñãÂßãÂàÜÊûê„ÄçÈÄ≤Ë°åÈù¢ÈÉ®ÂàÜÊûê", Toast.LENGTH_LONG).show();
        } catch (Exception e) {
            Log.e(TAG, "È°ØÁ§∫ÂúñÁâáÈ†êË¶ΩÂ§±Êïó", e);
            Toast.makeText(this, "È°ØÁ§∫ÂúñÁâáÂ§±Êïó", Toast.LENGTH_SHORT).show();
        }
    }

    private void analyzeSelectedImage() {
        if (selectedImageUri == null) {
            Toast.makeText(this, "Ë´ãÂÖàÈÅ∏ÊìáÂúñÁâá", Toast.LENGTH_SHORT).show();
            return;
        }

        _bMainActivity.clearGlobalCache();

        // ÈÄ≤Â∫¶Â∞çË©±Ê°Ü
        // È°ØÁ§∫ÈÄ≤Â∫¶Â∞çË©±Ê°Ü
        AlertDialog progressDialog = new AlertDialog.Builder(this)
                .setTitle("ÂàÜÊûê‰∏≠")
                .setMessage("Ê≠£Âú®ÈÄ≤Ë°åÈù¢ÈÉ®ËÜöËâ≤ÂàÜÊûêÔºåË´ãÁ®çÂÄô...")
                .setCancelable(false)
                .create();
        progressDialog.show();

        try {
            // Â∞áURIËΩâÊèõÁÇ∫Bitmap
            Bitmap originalBitmap = uriToBitmap(selectedImageUri);

            if (originalBitmap == null) {
                progressDialog.dismiss();
                Toast.makeText(this, "ÁÑ°Ê≥ïËºâÂÖ•ÂúñÁâáÔºåË´ãÈáçÊñ∞ÈÅ∏Êìá", Toast.LENGTH_SHORT).show();
                return;
            }

            // üîß ÈóúÈçµÔºö‰øùÂ≠òÂéüÂßãÂúñÁâáÁöÑBase64Êï∏Êìö
            String originalImageBase64 = bitmapToBase64(originalBitmap);

            Log.d(TAG, "ÈñãÂßãÂàÜÊûêÂúñÁâáÔºåÂ∞∫ÂØ∏: " + originalBitmap.getWidth() + "x" + originalBitmap.getHeight());

            // ÂëºÂè´ÂæåÁ´ØÂàÜÊûêÔºàÁ¨¨‰∏ÄÊ¨°ÂàÜÊûêÔºöÂÉÖÊ™¢Ê∏¨Áó£Ôºå‰∏çÁßªÈô§Ôºâ
            apiService.analyzeFaceWithMoleDetection(originalBitmap, false, new ApiService.AnalysisCallback() {
                @Override
                public void onSuccess(ApiService.AnalysisResult result) {
                    runOnUiThread(() -> {
                        progressDialog.dismiss();
                        Log.d(TAG, "ÂàÜÊûêÊàêÂäü");

                        // Ê™¢Êü•ÊòØÂê¶ÊúâÁó£
                        boolean hasMoles = result.hasMoles();  // ‰øÆÊ≠£ÔºöÊîπÁÇ∫ hasMoles()

                        if (hasMoles) {
                            Log.d(TAG, "Ê™¢Ê∏¨Âà∞Áó£ÔºåÂâçÂæÄ WarningActivity");
                            // ÊúâÁó£ÔºåÂâçÂæÄË≠¶ÂëäÈ†ÅÈù¢
                            Intent intent = new Intent(PhotoActivity.this, WarningActivity.class);

                            AnalysisResult parcelableResult = new AnalysisResult(result);
                            intent.putExtra("analysis_result", parcelableResult);
                            intent.putExtra("source_type", "photo");
                            intent.putExtra("original_image_base64", originalImageBase64);
                            intent.putExtra("from_photo", true);
                            intent.putExtra("has_moles", true);  // ‰øÆÊ≠£ÔºöÊîπÁÇ∫ has_moles

                            startActivity(intent);
                        } else {
                            Log.d(TAG, "Êú™Ê™¢Ê∏¨Âà∞Áó£ÔºåÁõ¥Êé•ÂâçÂæÄ _bMainActivity");
                            // Ê≤íÊúâÁó£ÔºåÁõ¥Êé•ÂâçÂæÄ‰∏ªÁµêÊûúÈ†ÅÈù¢
                            Intent intent = new Intent(PhotoActivity.this, _bMainActivity.class);

                            AnalysisResult parcelableResult = new AnalysisResult(result);
                            intent.putExtra("analysis_result", parcelableResult);
                            intent.putExtra("source_type", "photo");
                            intent.putExtra("original_image_base64", originalImageBase64);
                            intent.putExtra("from_photo", true);
                            intent.putExtra("has_moles", false);  // ‰øÆÊ≠£ÔºöÊîπÁÇ∫ has_moles

                            startActivity(intent);
                            finish();
                        }
                    });
                }

                @Override
                public void onFailure(String error) {
                    runOnUiThread(() -> {
                        progressDialog.dismiss();
                        Log.e(TAG, "ÂàÜÊûêÂ§±Êïó: " + error);

                        new AlertDialog.Builder(PhotoActivity.this)
                                .setTitle("ÂàÜÊûêÂ§±Êïó")
                                .setMessage("Èù¢ÈÉ®ÂàÜÊûêÂ§±ÊïóÔºö\n" + error + "\n\nË´ãÊ™¢Êü•Ôºö\n‚Ä¢ Á∂≤Áµ°ÈÄ£Êé•ÊòØÂê¶Ê≠£Â∏∏\n‚Ä¢ ÂúñÁâáÊòØÂê¶Ê∏ÖÊô∞\n‚Ä¢ Èù¢ÈÉ®ÊòØÂê¶ÂÆåÊï¥ÂèØË¶ã")
                                .setPositiveButton("ÈáçË©¶", (dialog, which) -> analyzeSelectedImage())
                                .setNegativeButton("ÂèñÊ∂à", (dialog, which) -> {
                                    selectedImageUri = null;
                                    imagePreview.setImageResource(0);
                                    btnPickPhoto.setText("ÈÅ∏ÊìáÁÖßÁâá");
                                })
                                .show();
                    });
                }
            });

        } catch (Exception e) {
            progressDialog.dismiss();
            Log.e(TAG, "ËôïÁêÜÂúñÁâáÊôÇÁôºÁîüÈåØË™§", e);
            Toast.makeText(this, "ËôïÁêÜÂúñÁâáÂ§±Êïó: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        }
    }

    private Bitmap uriToBitmap(Uri uri) {
        try {
            InputStream inputStream = getContentResolver().openInputStream(uri);
            Bitmap originalBitmap = BitmapFactory.decodeStream(inputStream);


            if (originalBitmap == null) {
                return null;
            }

            // Â¶ÇÊûúÂúñÁâáÂ§™Â§ßÔºåÈÄ≤Ë°åÁ∏ÆÊîæ‰ª•ÊèêÈ´òËôïÁêÜÈÄüÂ∫¶
            int maxSize = 1024;
            int width = originalBitmap.getWidth();
            int height = originalBitmap.getHeight();

            if (width > maxSize || height > maxSize) {
                float scale = Math.min((float) maxSize / width, (float) maxSize / height);
                int newWidth = Math.round(width * scale);
                int newHeight = Math.round(height * scale);

                Bitmap scaledBitmap = Bitmap.createScaledBitmap(originalBitmap, newWidth, newHeight, true);
                originalBitmap.recycle(); // ÈáãÊîæÂéüÂßãÂúñÁâáË®òÊÜ∂È´î
                return scaledBitmap;
            }

            return originalBitmap;

        } catch (IOException e) {
            Log.e(TAG, "ËΩâÊèõURIÂà∞BitmapÂ§±Êïó", e);
            return null;
        }
    }

    // Ê∑ªÂä†BitmapËΩâBase64ÁöÑÊñπÊ≥ï
    private String bitmapToBase64(Bitmap bitmap) {
        try {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

            // Â£ìÁ∏ÆÂúñÁâá‰ª•Ê∏õÂ∞ëÂ§ßÂ∞èÔºå‰ΩÜ‰øùÊåÅÂèØÈ°ØÁ§∫ÁöÑË≥™Èáè
            int quality = 80;
            bitmap.compress(Bitmap.CompressFormat.JPEG, quality, byteArrayOutputStream);

            byte[] byteArray = byteArrayOutputStream.toByteArray();
            String base64String = Base64.encodeToString(byteArray, Base64.NO_WRAP);

            return "data:image/jpeg;base64," + base64String;

        } catch (Exception e) {
            Log.e(TAG, "BitmapËΩâBase64Â§±Êïó", e);
            return null;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // Ê∏ÖÁêÜË≥áÊ∫ê
        if (imagePreview.getDrawable() != null) {
            imagePreview.setImageDrawable(null);
        }
    }
}